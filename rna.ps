%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.2
%%CreationDate: Mon Apr 15 19:14:42 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGAAAAUAGCCGACCUCCCGGGUAAUCCGGACACGCUCCGAUAGCCACCACCCAGAUGUUACCG\
) } def
/len { sequence length } bind def

/coor [
[143.04058838 169.06025696]
[149.83470154 155.57905579]
[138.74955750 145.47361755]
[127.66442871 135.36819458]
[116.57929993 125.26275635]
[105.19869232 129.76664734]
[92.96517944 129.38691711]
[81.88581848 124.18586731]
[73.77833557 115.01679230]
[69.97287750 103.38401031]
[55.11671829 101.31166840]
[40.37992477 107.06819153]
[28.84366035 97.64673615]
[13.98750401 95.57438660]
[-0.86865216 93.50204468]
[-13.32812119 103.22506714]
[-29.00306320 101.20721436]
[-38.59381485 88.64564514]
[-36.41035080 72.99291229]
[-23.74808502 63.53550720]
[-8.11931133 65.88433838]
[1.20369315 78.64588928]
[16.05984879 80.71823120]
[30.91600609 82.79057312]
[44.59018707 76.88582611]
[57.18906403 86.45551300]
[72.04521942 88.52785492]
[76.72129822 80.73392487]
[83.50351715 74.68309021]
[91.77826691 70.92281342]
[100.79687500 69.79329681]
[104.90182495 55.36591339]
[109.00676727 40.93852997]
[113.11170959 26.51114464]
[106.59266663 11.85230541]
[114.11640930 -2.31712627]
[129.91137695 -5.12757540]
[141.86100769 5.57689428]
[140.79858398 21.58473015]
[127.53909302 30.61609077]
[123.43415070 45.04347610]
[119.32920837 59.47085953]
[115.22425842 73.89824677]
[129.06369019 91.73066711]
[126.68473053 114.17761993]
[137.76986694 124.28305054]
[148.85499573 134.38848877]
[159.94013977 144.49392700]
[172.73693848 136.48490906]
[187.22033691 132.22653198]
[202.31556702 132.03479004]
[216.90245056 135.92391968]
[229.89854431 143.60531616]
[240.33947754 154.50897217]
[247.45043945 167.82575989]
[250.70375061 182.56747437]
[249.85800171 197.64021301]
[244.97595215 211.92546082]
[236.41987610 224.36314392]
[224.82469177 234.03033447]
[211.05085754 240.20962524]
[196.12045288 242.44250488]
[181.14143372 240.56326294]
[167.22534180 234.71136475]
[155.40483093 225.32102966]
[146.55706787 213.08912659]
[141.33862305 198.92330933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[10 27]
[11 26]
[13 24]
[14 23]
[15 22]
[31 43]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
